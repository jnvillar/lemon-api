// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"
	walletmodel "lemonapp/domain/wallet/model"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateWallets provides a mock function with given fields: ctx, userID
func (_m *Service) CreateWallets(ctx context.Context, userID string) ([]walletmodel.Wallet, error) {
	ret := _m.Called(ctx, userID)

	var r0 []walletmodel.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) []walletmodel.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]walletmodel.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *Service) GetByID(ctx context.Context, userID string) (walletmodel.Wallet, error) {
	ret := _m.Called(ctx, userID)

	var r0 walletmodel.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) walletmodel.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(walletmodel.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWallet provides a mock function with given fields: ctx, userID, walletID
func (_m *Service) GetUserWallet(ctx context.Context, userID string, walletID string) (walletmodel.Wallet, error) {
	ret := _m.Called(ctx, userID, walletID)

	var r0 walletmodel.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string, string) walletmodel.Wallet); ok {
		r0 = rf(ctx, userID, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(walletmodel.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWallets provides a mock function with given fields: ctx, userID
func (_m *Service) GetUserWallets(ctx context.Context, userID string) ([]walletmodel.Wallet, error) {
	ret := _m.Called(ctx, userID)

	var r0 []walletmodel.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) []walletmodel.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]walletmodel.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalance provides a mock function with given fields: ctx, walletID, balance
func (_m *Service) UpdateBalance(ctx context.Context, walletID string, balance int64) error {
	ret := _m.Called(ctx, walletID, balance)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, walletID, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
